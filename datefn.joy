(*
    module  : datefn.joy
    version : 1.4
    date    : 10/31/24
*)
"leap.joy" include.

LIBRA

(*
    Calculate the number of days from May 1, 2014 until the given year.
*)
offset ==	# year
2014		# year start
-120		# year start offset
[over 3 pick <]	# as long as start is smaller than year
		# determine number of days in start and add them to offset
[[over isleap] [366] [365] ifte	# year start offset days
+		# year start offset
[succ] dip	# year start+1 offset
] while		# year year offset
popd popd;	# offset

(*
    Ask the current date from the system and return as integer.
*)
sysdate ==	#
time		# seconds since January 1, 1970
localtime	# [year month day hour minute second isdst yearday weekday]
dup		# [year .. weekday] [year .. weakday]
7 at		# [year .. weekday] yearday
succ		# [year .. weekday] yearday+1
swap		# yearday+1 [year .. weakday]
first		# yearday+1 year
offset		# yearday+1 days
+;		# days

(*
    Calculate the year of a given date. Date is decreased and year is
    increased from 2014 onwards.
*)
startyear ==	# date
120		# date 120
+		# date
2014		# date year
[over 1 >]	# as long as date is positive
[		# date year days
[dup isleap] [366] [365] ifte
swap		# date days year
succ		# date days year+1
[-] dip		# date year
]
while
[over 1 <]	# if date is 0 or negative
[pred]		# decrease year
[] ifte		# date year
popd;		# year

(*
    Calculate day and month from the yearday.
*)
daymonth ==	# year yearday
[31 <=]		# separate test for January
[1 swap]	# insert month
[[over		# year yearday year
isleap]		# year yearday leap
[[366 335 305 274 244 213 182 152 121 91 60 31]]	# daytab in leap year
[[365 334 304 273 243 212 181 151 120 90 59 31]]	# daytab in normal year
ifte
[over swap -]	# calculate difftab from daytab and yearday
map popd	# year difftab
[0 >] filter	# extract positive amounts
dup		# year postab postab
first		# year postab day
[size		# year month-1 day
succ] dip]	# year month day
ifte;		# year month day

(*
    Calculate year, month, day from a date.
*)
datedmy ==	# date
dup		# date date
startyear	# date year
dup		# date year year
swapd		# year date year
offset		# year date start
-		# year yearday
daymonth;	# year month day

(*
    Format a number as a string of 2 characters with a possible leading zero.
*)
numstr ==	# num
'd 0 0 format	# str
[dup size 1 =]	# if the size is 1, a leading zero must be prepended.
["0" swoncat]	# add the missing zero
[] ifte;	# str

(*
    Convert a date to a string, formatted as ddmmyy. The century is not
    included. A date equal to 0 is treated as a special case and results
    in an empty string.
*)
datestr ==	# date
[dup null]
[pop "      "]	# empty string
[datedmy	# year month day
numstr		# year month "day"
rotate		# "day" month year
100 rem		# "day" month year%100
numstr		# "day" month "year"
[numstr] dip	# "day" "month" "year"
concat		# "day" "monthyear"
concat]		# "daymonthyear"
ifte;

(*
    Calculate the day number in a year.
*)
yearday ==	# day month year
[dup isleap]	# day month leap
[pop [0 0 31 60 91 121 152 182 213 244 274 305 335 366]]	# leap year
[pop [0 0 31 59 90 120 151 181 212 243 273 304 334 365]]	# normal year
ifte		# day month daytab
of		# day monthdays
+;		# yearday

(*
    Convert a string to a date.
*)
strdate	==	# "ddmmyy"
dup		# "ddmmyy" "ddmmyy"
2 take		# "ddmmyy" "dd"
10 strtol	# "ddmmyy" dd
swap		# dd "ddmmyy"
dup		# dd "ddmmyy" "ddmmyy"
2 drop		# dd "ddmmyy" "mmyy"
2 take		# dd "ddmmyy" "mm"
10 strtol	# dd "ddmmyy" mm
swap		# dd mm "ddmmyy"
4 drop		# dd mm "yy"
10 strtol	# dd mm yy
2000 +		# dd mm ccyy
dup		# dd mm ccyy ccyy
offset		# dd mm ccyy start
[yearday] dip	# yearday start
+		# date
[0 <]
[pop 0]
[]
ifte.		# ensure at least 0
