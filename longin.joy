(*
    module  : longin.joy
    version : 1.1
    date    : 11/15/23
*)

LIBRA 

(*
    Integers can be negative.
*)

(*
    Input of an integer at x, y. The integer needs to be converted to a string
    prior to input and converted to integer after input.
    If the integer is negative, the sign needs to be separated out.
*)
longin ==		# amount x y
rolldown		# x y amount
[dup 0 <]		# if negative
[neg '-]		# make positive and encode ok-flag
['=]			# encode ok-flag
ifte			# x y amount ok
swap			# x y ok amount
rollupd			# ok x y amount
'd -19 1 format		# max. width is 19 characters; min. width is 1
dup			# ok x y "amount" "amount"
"[ " swoncat		# ok x y "amount" "[ amount"
"]" concat		# ok x y "amount" "[ amount]"
3 pick			# ok x y "amount" "[ amount]" x
pred pred		# ok x y "amount" "[ amount]" x-2
3 pick			# ok x y "amount" "[ amount]" x-2 y
true			# ok x y "amount" "[ amount]" x-2 y true
print			# ok x y "amount"
0			# ok x y "amount" 0
editln			# ok x y str pos ch
popd			# ok x y str ch -> pos is no longer needed
swap			# ok x y ch str
rollupd			# ok ch x y str
10 strtol		# ok ch x y amount
[4 pick '- =]		# test sign character
[neg] [] ifte		# ok ch x y amount
dup			# ok ch x y amount amount
'd -19 1 format		# ok ch x y amount format
rollupd			# ok ch amount x y format
" " swoncat		# ok ch amount x y " format"
"  " concat		# ok ch amount x y " format  "
rollup			# ok ch amount format x y
[pred pred] dip		# ok ch amount format x-2 y
false			# ok ch amount format x-2 y false
print			# ok ch amount
rotate			# amount ch ok
pop.			# amount ch
