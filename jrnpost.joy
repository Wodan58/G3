(*
    module  : jrnpost.joy
    version : 1.6
    date    : 06/29/24
*)
"nextseq.joy" include.
"jrntest.joy" include.

LIBRA

(*
    Cash and Bank are similar postings. Only the standard account is different.
    initpost only outputs the sequence number.
*)
initpost ==				# [..]
next-seqnr				# [..] seqnr
"journal.txt" "a" fopen			# [..] seqnr fp
over fput '\t fputch;			# [..] seqnr fp -> seqnr

(*
    restpost posts the rest of the posting.
*)
restpost ==				# [..] seqnr fp Cash/Bank
fput '\t fputch				# [..] seqnr fp -> Cash/Bank
2 pick first second fput '\t fputch	# [..] seqnr fp -> date
2 pick second second fput '\n fputch	# [..] seqnr fp -> amnt

over fput '\t fputch			# [..] seqnr fp	-> seqnr
2 pick third second fput '\t fputch	# [..] seqnr fp -> accnt
2 pick first second fput '\t fputch	# [..] seqnr fp -> date
2 pick second second			# [..] seqnr fp amnt
3 pick fourth second			# [..] seqnr fp amnt VAT-amnt
- neg					# [..] seqnr fp amnt (corrected,negated)
fput '\n fputch				# [..] seqnr fp -> amnt

(*
    Put the VAT-accnt in global variable Account
*)
2 pick fourth second			# [..] seqnr fp VAT-amnt 
[null]
[pop]					# [..] seqnr fp
[swap					# [..] seqnr VAT-amnt fp
2 pick fput '\t fputch			# [..] seqnr VAT-amnt fp -> seqnr
Account fput '\t fputch			# [..] seqnr VAT-amnt fp -> accnt
3 pick first second fput '\t fputch	# [..] seqnr VAT-amnt fp -> date
swap neg				# [..] seqnr fp VAT-amnt (negated)
fput '\n fputch]			# [..] seqnr fp -> VAT-amnt
ifte
fclose					# [..] seqnr
pop					# [..]
pop					#
[Jrn] unassign				# invalidate Jrn
REGISTER-MENU PrintHeader;

(*
    This is a posting from the Cash standard account.
*)
cashpost ==				# [..]
[jrntest]				# test everything is filled
[initpost				# [..] seqnr fp
std-Cash				# [..] seqnr fp Cash
(*
    If this is the first time that Cash is used, then the standard setting may
    not be present and must be added.
*)
[null]
[pop					# [..] seqnr fp "Cash"
3 pick					# [..] seqnr fp "Cash" [..]
first					# [..] seqnr fp "Cash" [..]
second					# [..] seqnr fp "Cash" Cash
"stdacct.txt" "a" fopen			# [..] seqnr fp "Cash" Cash fp
2 pick					# [..] seqnr fp "Cash" Cash fp "Cash"
fput '\t fputch				# [..] seqnr fp "Cash" Cash fp
swap					# [..] seqnr fp "Cash" fp Cash
fput '\n fputch				# [..] seqnr fp "Cash" fp
fclose					# [..] seqnr fp "Cash"
pop					# [..] seqnr fp
[Std] unassign				# invalidate Std
(*
    Also, the screen must be modified, otherwise the correct data will not be
    picked up.
*)
rotate					# fp seqnr [..]
1 drop					# fp seqnr [..]
rotate					# [..] seqnr fp
std-Cash]				# [..] seqnr fp Cash
[]
ifte
restpost]
[] ifte;

(*
   This is a posting from the Bank standard account.
*)
bankpost ==				# [..]
[jrntest]				# test everything is filled
[initpost				# [..] seqnr fp
std-Bank				# [..] seqnr fp Bank
(*
    If this is the first time that Cash is used, then the standard setting may
    not be present and must be added.
*)
[null]
[pop					# [..] seqnr fp "Bank"
3 pick					# [..] seqnr fp "Bank" [..]
first					# [..] seqnr fp "Bank" [..]
second					# [..] seqnr fp "Bank" Bank
"stdacct.txt" "a" fopen			# [..] seqnr fp "Bank" Bank fp
2 pick					# [..] seqnr fp "Bank" Bank fp "Bank"
fput '\t fputch				# [..] seqnr fp "Bank" Bank fp
swap					# [..] seqnr fp "Bank" fp Bank
fput '\n fputch				# [..] seqnr fp "Bank" fp
fclose					# [..] seqnr fp "Bank"
pop					# [..] seqnr fp
[Std] unassign				# invalidate Std
(*
    Also, the screen must be modified, otherwise the correct data will not be
    picked up.
*)
rotate					# fp seqnr [..]
1 drop					# fp seqnr [..]
rotate					# [..] seqnr fp
std-Bank]				# [..] seqnr fp Bank
[]
ifte
restpost]
[] ifte;

(*
    If everything is filled in correctly, the records can be posted.
    This is the general purpose posting - two accounts are involved.
*)
do-memopost ==				# [..]
initpost				# [..] seqnr fp
2 pick second second fput '\t fputch	# 1st account
2 pick first second fput '\t fputch	# date
2 pick third second fput '\n fputch	# amount

over fput '\t fputch			# seqnr
2 pick fourth second fput '\t fputch	# 2nd account
2 pick first second fput '\t fputch	# date
2 pick third second neg fput '\n fputch	# amount
fclose					# [..] seqnr
pop					# [..]
pop					#
[Jrn] unassign				# invalidate Jrn
REGISTER-MENU PrintHeader;

memopost ==
[jrntest]				# test everything is filled
[do-memopost]
[] ifte;

(*
    Print a posting from the year-end closure.
*)
yearendpost ==			# [acct "" amnt] seqnr
"journal.txt" "a" fopen		# [acct "" amnt] seqnr fp
swap				# [acct "" amnt] fp seqnr
fput '\t fputch 		# [acct "" amnt] fp -> seqnr
over first fput '\t fputch	# [acct "" amnt] fp -> acct
EndDate fput '\t fputch		# [acct "" amnt] fp -> EndDate
swap				# fp [acct "" amnt]
third neg fput '\n fputch	# fp -> amnt
fclose				#
[Jrn] unassign;			# invalidate Jrn

(*
    Print to the result account during year-end closure.
*)
yearfinish ==			# sum seqnr
"journal.txt" "a" fopen		# sum seqnr fp
swap				# sum fp seqnr
fput '\t fputch			# sum fp -> seqnr
Result fput '\t fputch		# sum fp -> Result
EndDate fput '\t fputch		# sum fp -> EndDate
swap				# fp sum
fput '\n fputch			# fp -> sum
fclose				#
[Jrn] unassign.			# invalidate Jrn
