(*
    module  : editln.joy
    version : 1.2
    date    : 05/05/24
*)
"string.joy" include.

LIBRA

wrap == [] swap [cons] times;
unwrap == [] step;

(*
    A multi-character line can only be ended with up and down cursor. Only
    choice-fields allow ending with left and right cursor.
*)
test-multi ==	# ch
[UARR DARR]
in;		# t/f

test-single ==	# ch
[UARR DARR LARR RARR]
in;		# t/f

(*
    The minus character is deep down the stack, and is modified to indicate the
    sign character as part of the string: '= means no sign and '- means minus
    sign. The ok field might contain something other that '= or '- and in that
    case nothing is modified.
*)
toggle-minus ==	# ok x y str pos ch
5 wrap		# ok [..]
swap		# [..] ok
[dup '- =] 	# test minus
[pop '=]	# replace by '=
[[dup '= =]	# test equal
[pop '-]	# replace by '-
[] ifte]	#
ifte
swap		# ok [..]
unwrap;		# ok x y str pos ch

(* ok x y str pos ch -> ok x y str pos *)
test-minus ==	# ok x y str pos ch
[dup '- =]	# a '- has been pressed
[toggle-minus	# change ok
5 pick		# ok x y str pos ch ok
[dup '- =]	# if '- then echo '-
[pop]		# ok x y str pos ch
[pop pop '\032]	# replace '= by space
ifte		# ok x y str pos ch
(* echo the '- character or the space character *)
cursave 4 pick pred 4 pick gotoxy putch currestore]
(* echo character (ch) update string (str) and position (pos) *)
[dup putch update-pos succ] ifte;

test-allow ==	# ok x y str pos ch ch
6 pick		# ok x y str pos ch ch ok
[['= dup '- = swap dup '0 >= swap '9 <= and or]		# amounts
['- dup '- = swap dup '0 >= swap '9 <= and or]		# amounts
['0 dup '0 >= swap '9 <= and]				# accounts
['\032 dup '\032 >= swap 127 < and]			# text
[in]] case;						# choice

(*
    Testnormal depends on what is considered normal.
*)
test-normal ==	# ok x y str pos ch
[dup test-allow]	# test space or graphic
(* a minus character must be echoed at position 0 and the cursor stays put *)
[[5 pick '\032 =] [dup putch update-pos succ] [test-minus] ifte]
[pop]		# ok x y str pos -> remove abnormal character
ifte;		# ok x y str pos -> result of ifte

test-endpos ==	# str pos ch
2 pick		# str pos ch str
size		# str pos ch size
2 pick		# str pos ch size pos
=;		# str pos ch t/f

reprint ==	# x y str pos
3 pick		# x y str pos x
3 pick		# x y str pos x y
gotoxy		# x y str pos
over		# x y str pos str
putchars	# x y str pos
dup		# x y str pos pos
4 pick		# x y str pos pos x
+		# x y str pos x+pos
3 pick		# x y str pos x+pos y
gotoxy;		# x y str pos

test-insert ==	# str pos ch
[test-endpos]	# str pos ch
[pop]		# str pos -> remove out-of-bounds character
[test-normal]	# str pos ch -> insert character
ifte;		# str pos -> result of ifte

clear-field ==	# x y str pos
[create] dip	# x y str pos
reprint		# x y str pos
pop		# x y str
2 pick
2 pick
gotoxy
0;		# x y str pos

not-endpos ==	# str pos
over		# str pos str
size		# str pos size
over		# str pos size pos
>;		# str pos b

forwspace ==	# x y str pos
insert-pos	# x y str pos
reprint;	# x y str pos

backspace ==	# x y str pos
pred		# x y str pos-1
delete-pos	# x y str pos
reprint;	# x y str pos

(* ok x y str pos ch -> ok x y str pos *)
edit-key ==	# ok x y str pos ch
[[BACKSPACE [dup] [backspace] [] ifte]
[HOME [dup] [pred curleft] while]
[LARR [dup] [pred curleft] [] ifte]
[INSERT [not-endpos] [forwspace] [] ifte]
[END_ [not-endpos] [succ curright] while]
[RARR [not-endpos] [succ curright] [] ifte]
[DELETE clear-field]
[test-insert]] case;

(* ok x y str pos -> ok x y str pos ch *)
edit-multi ==	# ok x y str pos
3 pick		# ok x y str pos x 
3 pick		# ok x y str pos x y
gotoxy		# ok x y str pos
getkey		# ok x y str pos ch
(* repeat input until an endkey is pressed *)
[dup test-multi not]
[edit-key getkey]
while;		# ok x y str pos ch

(*
    Similar to edit-mul, except that all arrows and only arrows end input.
*)
edit-single ==	# ok x y str pos
3 pick
3 pick
gotoxy
getkey
[dup test-single not]
[pop getkey]
while;

(* ok x y str pos -> ok x y str pos ch *)
editln ==
[over size 1 =] [edit-single] [edit-multi] ifte.
